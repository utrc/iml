grammar com.utc.utrc.hermes.iml.Iml with org.eclipse.xtext.common.Terminals

generate iml "http://www.utc.com/utrc/hermes/iml/Iml"


import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	'package' name=QualifiedName ';'
	(imports+=Import ';')*
	(symbols+=Symbol)*
;

QualifiedName:
	ID ('.' ID)*;


Import:
	'import' importedNamespace=QualifiedNameWithWildcard;


QualifiedNameWithWildcard:
	QualifiedName '.*'?;

Symbol :
	SymbolDeclaration ";"|
	NamedType |
	Assertion ";"
;

Doc :
  {Doc}('@' properties+=[NamedType|QualifiedName] descriptions+=STRING)+
;
	
Property:
	{Property} ref=SimpleTypeReference (definition=SequenceTerm)?
;

PropertyList:
 '[' properties+=Property (',' properties+=Property)* ']'
;

TypeWithProperties :
	(properties=PropertyList)? type=ImlType
;

Relation:
	{Extension}( extends?='extends' '(' extensions+=TypeWithProperties (',' extensions+=TypeWithProperties)*')'   ) |
	{Alias}( alias?='is' type=TypeWithProperties  ) |
	{TraitExhibition}( exhibits?='exhibits' '('exhibitions+=TypeWithProperties (',' exhibitions+=TypeWithProperties)*  ')' ) 
;

NamedType:
	(
		{Annotation} 'annotation' | 
	 	{Trait} 'trait' | 
	 	{NamedType} 'type'
	)   
	(propertylist=PropertyList)? 
	name=ID 
	(template?='<' typeParameter+=TypeParameter (',' typeParameter+=TypeParameter)* '>')? 
	( relations += Relation)*
	( restrictions += TypeRestriction)*
	(';' | ('{' (symbols+=(SymbolDeclaration|Assertion) ';')* '}' ";"?)) 
	
;

TypeRestriction :
	(
		{CardinalityRestriction} (finite?='finite' cardinality=INT) |  
		{EnumRestriction}
		(^enum?='enum' '{' literals+=NonParametricUntypedSymbolDeclaration 
			               (',' literals+=NonParametricUntypedSymbolDeclaration)* '}'
		)
	)
;

TypeParameter returns NamedType:
	name=ID (relations+=Relation)*
;

SymbolDeclaration:
	(propertylist=PropertyList)?
	 (template?='<' typeParameter+=TypeParameter 
	 	            (',' typeParameter+=TypeParameter)* '>')? 
     name=ID   (':' type=ImlType )?  (':=' definition=FolFormula)? 
;

Assertion returns SymbolDeclaration :
	{Assertion}  'assert' (propertylist=PropertyList)? (comment=STRING)? (name=ID)? definition=SequenceTerm
;

NonParametricUntypedSymbolDeclaration returns SymbolDeclaration :
	name=ID  
;

NonParametricTypedSymbolDeclaration returns SymbolDeclaration :
	name=ID  ':' type=ImlType 
;

ImlType:
	ArrayType ({FunctionType.domain=current} '->' range=ArrayType)*  
;

ArrayType returns ImlType:
	(SimpleTypeReference|TupleOrExpressionType) 
	   ({ArrayType.type=current} (('['dimensions+=OptionalTermExpr']'))+)?
;

TupleOrExpressionType returns ImlType :
	ExplicitTupleType |
	ParenthesizedTypeExpression	
	
;

ExplicitTupleType returns ImlType :
	{TupleType} 'Tuple' '(' symbols+=TupleSymbol (',' symbols+=TupleSymbol)* ')'  
;

ParenthesizedTypeExpression returns ImlType :
	//=>({EmptyTupleType}'('')') |
	=>('(' ImlType  ')') |
	 {TupleType}('(' (symbols+=TupleSymbol (',' symbols+=TupleSymbol)*)?  ')') 
;
	
OptionalTermExpr:
	{OptionalTermExpr} term=TermExpression?
;

TupleSymbol returns SymbolDeclaration:
	(name=ID ':')? type=ImlType
;

SimpleTypeReference returns ImlType:
	{SelfType} 'Self' |
	{SimpleTypeReference} type=[NamedType|QualifiedName]
	/*Optional type parameters for generic types */
	('<' typeBinding+=ImlType (',' typeBinding+=ImlType)* '>')? 
;

/*Entry point for a first order logic formula.*/
FolFormula:
	/*Weakest operators are implication -> and double implication <->*/
	 Formula ({FolFormula.left=current} op=('=>' | '<=>') right=Formula)?;

Formula returns FolFormula:
	OrExpression;

/*A quantified formula (universally or existentially quantified) has
 * a list of bound variables and a body defined over those variables.
 */
QuantifiedFormula returns TermExpression:
	{QuantifiedFormula} op=('forall' | 'exists')
	(template?='<' typeParameter+=TypeParameter 
		          (',' typeParameter+=TypeParameter)* '>')? 
      '(' scope+=NonParametricTypedSymbolDeclaration 
         (',' scope+=NonParametricTypedSymbolDeclaration)* ')' 
        left = SequenceTerm;

/*Disjunction of two formulas */
OrExpression returns FolFormula:
	AndExpression ({OrExpression.left=current} op='||' right=AndExpression)*;

/*Conjunction of two formulas*/
AndExpression returns FolFormula:
	SignedAtomicFormula ({AndExpression.left=current} op='&&' right=SignedAtomicFormula)*;
		
/*Strongest operator is the negation of a formula */
SignedAtomicFormula returns FolFormula:
	{SignedAtomicFormula} (neg?='!')? left=AtomicExpression;
 
AtomicExpression returns FolFormula:
	TermExpression (=>( {AtomicExpression.left=current} rel=RelationKind ) right=TermExpression)? ;

TruthValue returns TermExpression:
	{TruthValue} (TRUE?='true' | FALSE?='false');

/*Allowed relation kinds are the equality (which can be used over all 
 * objects types), or the ordering relations among numeric types.
 */
enum RelationKind:
	EQ='=' | NEQ='!=' | LESS='<' | GREATER='>' | LEQ='<=' | GEQ='>=';

/*Generic term expression */
TermExpression:
	Addition;
	
/*Addition (or subtraction) of two terms */
Addition returns TermExpression:
	Multiplication ({Addition.left=current} sign=('+' | '-') right=Multiplication)*;


/*Multiplication, division, reminder and modulo of two terms */
Multiplication returns TermExpression:
	TailedExpression ({Multiplication.left=current} sign=('*' | '/' | '%' | 'mod')
	right=TailedExpression)*;

TailedExpression returns TermExpression:
	TerminalTerm (
		({TermMemberSelection.receiver=current} '.' member=SymbolReferenceTerm) |
		({TailedExpression.left=current} tail=ExpressionTail)
	) *
;

ExpressionTail:
	TupleConstructor |
	{ArrayAccess}  '['index=FolFormula']'
;

/*A terminal term can be a number, a reference to symbol defined in the scope
 * of the term, a reference to a constant of a finite type, an if-then-else term
 * expression, the keyword this, or a parenthesized term.
 */
TerminalTerm returns TermExpression:
	{NumberLiteral} neg?=('-')? value=INT |
	{FloatNumberLiteral} neg?=('-')? value = FLOAT |
	{StringLiteral} value = STRING |
	{CharLiteral} value = CHAR |
	SymbolReferenceTerm |
	TupleOrFormulaConstructor | 
	TruthValue |
	InstanceConstructor |
	IteTermExpression |
	CaseTermExpression |
	{SelfTerm} 'self' |
	SequenceTerm |
	{LambdaExpression}'fun' signature=TupleOrExpressionType (':' returnType=ImlType)?  definition=SequenceTerm |
	QuantifiedFormula
	 ;
	
InstanceConstructor returns TermExpression:
	{InstanceConstructor} 'some' '(' ref=TupleSymbol ')' definition=SequenceTerm
;

TupleOrFormulaConstructor returns TermExpression:
	ExplicitTupleConstructor |
	ParenthesizedTerm
;

ExplicitTupleConstructor returns TermExpression:
	{TupleConstructor} 'tuple' '(' elements+=FolFormula (',' elements+=FolFormula)* ')' 
;

ParenthesizedTerm returns TermExpression :
	=>({ParenthesizedTerm}'(' sub=FolFormula ')') |
	TupleConstructor
;

TupleConstructor returns TermExpression:
	//=>({EmptyTuple}'('')') |
	 {TupleConstructor} ('(' (elements+=FolFormula  (',' elements+=FolFormula)*)?  ')') 
;

SymbolReferenceTerm returns TermExpression:
{SymbolReferenceTerm}  ('<' typeBinding+=ImlType 
	                       (',' typeBinding+=ImlType)* '>')? 
	                    symbol=[Symbol] 
;

IteTermExpression returns TermExpression:
	{IteTermExpression} 'if' '(' condition=FolFormula ')' left=SequenceTerm
	                                          (=> 'else'  right=SequenceTerm)?;
	                                          
CaseTermExpression returns TermExpression:
	{CaseTermExpression} 'case' '{'
								(cases+=FolFormula ':' expressions+=TermExpression ';')+
						  '}'
								;	                                          

SequenceTerm returns TermExpression:
	{SequenceTerm} '{' ('var' defs+= SymbolDeclaration ';')* 
	         	   	   return=FolFormula ";"? '}' 
;

terminal EXT_INT: INT ('e'|'E')('-'|'+') INT;
terminal FLOAT returns ecore::EFloat : ('0'..'9')+ '.' ('0'..'9')+;
terminal CHAR returns ecore::EString:
			"'"."'"
		;
