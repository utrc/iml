/*
 * Copyright (c) 2019 United Technologies Corporation. All rights reserved.
 * See License.txt in the project root directory for license information. */
/*
 * generated by Xtext 2.12.0
 */
package com.utc.utrc.hermes.iml.formatting2

import com.google.inject.Inject
import com.utc.utrc.hermes.iml.iml.Model
import com.utc.utrc.hermes.iml.iml.Symbol
import com.utc.utrc.hermes.iml.services.ImlGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import com.utc.utrc.hermes.iml.iml.NamedType

class ImlFormatter extends AbstractFormatter2 {
	
	@Inject extension ImlGrammarAccess
	
	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		for (Import _import : model.getImports()) {
//			_import.format;
//			_import.append[newLine]
//		}
		for (Symbol element : model.symbols) {
			element.format;
			element.append[newLine]
		}
		model.allRegionsFor.keywords(";").forEach[it.append[newLine]]
	}

	def dispatch void format(NamedType type, extension IFormattableDocument document) {
		type.regionFor.keyword("{").append[newLine]
		type.regionFor.keyword("}").prepend[newLine].append[newLine]
		interior(
			type.regionFor.keyword(("{")), 
			type.regionFor.keyword(("}"))
		)[indent]
	}
	
	// TODO: implement for Alias, MetaRelaion, PropertyList, ConstrainedType, SymbolDeclaration, ImlType, ArrayType, OptionalTermExpr, TupleType, SimpleTypeReference, FolFormula, OrExpression, AndExpression, SignedAtomicFormula, AtomicExpression, Addition, Multiplication, TermMemberSelection, LambdaExpression, TypeConstructor, TupleConstructor, SymbolReferenceTerm, ArrayAccess, IteTermExpression, Program
}
