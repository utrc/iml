package iml.systems ;
import iml.lang.* ;


type Direction enum {IN, OUT, INOUT} ;

trait Connectable {
	connectTo : Self -> Connector<Self> :=
	fun(x:Self) : Connector<Self>{
		some(c:Connector<Self>) { c.source = self && c.target = x}		  
	}  ;
}

/*This is going to be reused in any definition of a port type.
 * It makes sense to have it as a trait.
 */
trait Port extends (Connectable) {
	direction : Direction ;
}

/*It might be useful to define a empty simple port that just has the
 * direction property
 */
type SimplePort exhibits (Port);

/*This is the trait of a type that carries and event */
trait EventCarrier<EventType> {
	event : EventType ;
}

/*This is the trait of a type that carries data */
trait DataCarrier<DataType> {
	data : DataType ;
}


trait EventPort<EventType> extends(Port,EventCarrier<EventType>);
trait DataPort<DateType> extends(Port,DataCarrier<DateType>);
trait EventDataPort<EventType,DataType> extends(Port,EventCarrier<EventType>,DataCarrier<DataType>);

type InEventPort<EventType> exhibits(EventPort<EventType>){
	assert {direction = Direction.IN} ;
};
type InDataPort<DateType> exhibits(DataPort<DateType>){
	assert {direction = Direction.IN} ;
};
type InEventDataPort<EventType,DataType> exhibits(EventDataPort<EventType,DataType>){
	assert {direction = Direction.IN} ;
};

type OutEventPort<EventType> exhibits(EventPort<EventType>){
	assert {direction = Direction.OUT} ;
};
type OutDataPort<DateType> exhibits(DataPort<DateType>){
	assert {direction = Direction.OUT} ;
};
type OutEventDataPort<EventType,DataType> exhibits(EventDataPort<EventType,DataType>){
	assert {direction = Direction.OUT} ;
};

type InOutEventPort<EventType> exhibits(EventPort<EventType>){
	assert {direction = Direction.INOUT} ;
};
type InOutDataPort<DateType> exhibits(DataPort<DateType>){
	assert {direction = Direction.INOUT} ;
};
type InOutEventDataPort<EventType,DataType> exhibits(EventDataPort<EventType,DataType>){
	assert {direction = Direction.INOUT} ;
};




/* This annotation is used on a symbol that belongs
 * to a system type to denote that the symbol
 * represents a component. The type of the system must
 * have a System annotation.
 * 
 */
trait Component { 
	subComponents<T exhibits(Component)> : Int -> T ; 
	ports<T exhibits(Port)> : Int -> T ;
};

/*A connection is a type of two elements of the same type.
 */
type Connector<T> {
	source : T ;
	target : T ;
};
