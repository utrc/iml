package iml.queries ;

annotation QueryFunction ;
annotation Query;

type Property<T> is T -> Bool ;
type Metric<T> is T -> Real ;

type RelationalProperty<T1,T2> is (T1,T2) -> Bool ;

/*Deterministic queries */
queryForall<T> : Property<T> -> Bool := 
	fun(x: Property<T>){ 
		forall(y:T){x(y)}
	};

queryExists<T> : Property<T> -> Bool := 
	fun(x: Property<T>){ 
		exists(y:T){x(y)}
	};


/*Deterministic relational queries */
	
RqueryFF<T1,T2> : RelationalProperty<T1,T2> -> Bool := 
	fun(x: RelationalProperty<T1,T2>){ 
		forall(y1:T1,y2:T2){x(y1,y2)}
	};

RqueryEE<T1,T2> : RelationalProperty<T1,T2> -> Bool := 
	fun(x: RelationalProperty<T1,T2>){ 
		exists(y1:T1,y2:T2){x(y1,y2)}
	};

RqueryFE<T1,T2> : RelationalProperty<T1,T2> -> Bool := 
	fun(x: RelationalProperty<T1,T2>){ 
		forall(y1:T1){ exists(y2:T2){x(y1,y2)}}
	};

RqueryEF<T1,T2> : RelationalProperty<T1,T2> -> Bool := 
	fun(x: RelationalProperty<T1,T2>){ 
		exists(y1:T1){ forall(y2:T2){x(y1,y2)}}
	};

/*Optimization queries */
min<T> : Metric<T> -> T := 
	fun(f : T->Real){
		some(x:T){forall(y:T){f(x) <= f(y)}}
	} ;

max<T> : Metric<T> -> T := 
	fun(f : T->Real){
		some(x:T){forall(y:T){f(x) >= f(y)}}
	} ;

sat<T> : Property<T> -> T := 
	fun(f : Property<T>){
		some(x:T){Property<T>(x)}
	} ;
