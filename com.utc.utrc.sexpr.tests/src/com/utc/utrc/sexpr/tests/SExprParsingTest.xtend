/*
 * generated by Xtext 2.12.0
 */
package com.utc.utrc.sexpr.tests

import com.google.inject.Inject
import com.utc.utrc.sexpr.sExpr.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import static org.junit.Assert.*
import com.utc.utrc.sexpr.sExpr.Atom
import com.utc.utrc.sexpr.sExpr.Seq

@RunWith(XtextRunner)
@InjectWith(SExprInjectorProvider)
class SExprParsingTest {
	@Inject extension ParseHelper<Model>
	
	@Inject extension ValidationTestHelper
	
	@Test
	def void testEmptyRoot() {
		val model = '''
		()
		'''.parse

		model.assertNoErrors
		
		assertEquals(0, model.root.elements.size)
	}
	
	@Test
	def void testRootWithAnAtom() {
		val model = '''
		(xxx)
		'''.parse
		model.assertNoErrors
		assertEquals(1, model.root.elements.size)
		assertEquals("xxx", (model.root.elements.get(0) as Atom).value)
	}
	
	@Test
	def void testRootWithMultipleTokens() {
		val model = '''
		(xx yy zz)
		'''.parse
		model.assertNoErrors
		assertEquals(3, model.root.elements.size)
		assertEquals("yy", (model.root.elements.get(1) as Atom).value)
	}
	
	@Test
	def void testRootWithNestedLists() {
		val model = '''
		(xx yy ((z1 z2) z3))
		'''.parse
		model.assertNoErrors
		
		assertEquals(3, model.root.elements.size)
		assertTrue(model.root.elements.get(2) instanceof Seq)
		assertEquals(2, (model.root.elements.get(2) as Seq).elements.size)
	}
	
	@Test
	def void testRootWithSpecialChars() {
		val model = '''
		(!declare :yy (smt-z3))
		'''.parse
		model.assertNoErrors
		assertEquals(3, model.root.elements.size)
		assertEquals("!declare", (model.root.elements.get(0) as Atom).value)
	}
	
	@Test
	def void testRootWithNumbers() {
		val model = '''
		(123 -24.51)
		'''.parse
		model.assertNoErrors
		
		assertEquals(2, model.root.elements.size)
		assertEquals("-24.51", (model.root.elements.get(1) as Atom).value)
	}
	
	@Test
	def void testAllowMultipleRootElements() {
		val model = '''
		(a b)
		(c d)
		'''.parse
		model.assertNoErrors
		
		assertEquals(2, model.sequences.size)
		assertEquals(2, model.sequences.get(1).elements.size)
	}
	
	def root(Model model) {
		model.sequences.get(0)
	}
}
