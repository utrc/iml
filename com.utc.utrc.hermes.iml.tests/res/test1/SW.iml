package SWIMLAnnex ;
import iml.contracts.* ;
import iml.connectivity.* ;
import iml.software.* ;
import iml.lang.* ;
import iml.ports.* ;
type Coordinate ;
type [ Implementation ] Coordinate_dot_Impl extends ( Coordinate ) {
	lat : Int ;
	long : Int ;
	alt : Int ;
}
type Map ;
type [ Implementation ] Map_dot_Impl extends ( Map ) {
	wp1 : Coordinate_dot_Impl ;
	wp2 : Coordinate_dot_Impl ;
	wp3 : Coordinate_dot_Impl ;
	wp4 : Coordinate_dot_Impl ;
}
type FlightPattern enum { ZigZag , StraightLine , Perimeter } ;
type Command ;
type [ Implementation ] Command_dot_Impl extends ( Command ) {
	Map : Map_dot_Impl ;
	Pattern : FlightPattern ;
	HMAC : Bool ;
}
type Mission ;
type [ Implementation ] Mission_dot_Impl extends ( Mission ) {
	wp1 : Coordinate_dot_Impl ;
	wp2 : Coordinate_dot_Impl ;
	wp3 : Coordinate_dot_Impl ;
	wp4 : Coordinate_dot_Impl ;
	wp5 : Coordinate_dot_Impl ;
	wp6 : Coordinate_dot_Impl ; 	
	wp7 : Coordinate_dot_Impl ;
	wp8 : Coordinate_dot_Impl ;
	wp9 : Coordinate_dot_Impl ;
	wp10 : Coordinate_dot_Impl ;
}
type MissionWindow ;
type [ Implementation ] MissionWindow_dot_Impl extends ( MissionWindow ) {
	wp1 : Coordinate_dot_Impl ;
	wp2 : Coordinate_dot_Impl ;
	wp3 : Coordinate_dot_Impl ;
	wp4 : Coordinate_dot_Impl ;
	crc : Bool ;
}
type [ Thread ] RadioDriver {
	[ Input ] recv_map_in : EventDataPort < Command_dot_Impl > ;
	[ Output ] send_status_out : EventDataPort < Coordinate_dot_Impl > ;
	[ Input ] send_status_in : EventDataPort < Coordinate_dot_Impl > ;
	[ Output ] recv_map_out : EventDataPort < Command_dot_Impl > ;


			[ Assumption ] a1 : Bool := recv_map_in.data.HMAC = true;
			[ Guarantee ]  g1 : Bool :=  recv_map_out.data.HMAC = true ;
		
}
type [ Thread ] FlightPlanner {
	[ Output ] flight_plan : DataPort < Mission_dot_Impl > ;
	[ Input ] recv_map : EventDataPort < Command_dot_Impl > ;
	[ Input ] position_status : EventDataPort < Coordinate_dot_Impl > ;


			[ Assumption ] a1 : Bool := recv_map.data.HMAC = true;
			[ Assumption ] a2 : Bool := good_gs_command(recv_map.data);
			[ Guarantee ] g1 : Bool := good_mission(flight_plan.data);
		
}
type [ Thread ] WaypointManager {
	[ Input ] flight_plan : DataPort < Mission_dot_Impl > ;
	[ Output ] waypoint : EventDataPort < MissionWindow_dot_Impl > ;
	[ Input ] position_status : EventDataPort < Coordinate_dot_Impl > ;


			[ Assumption ] a1 : Bool := good_mission(flight_plan.data);
			[ Guarantee ] g1 : Bool :=  good_mission_window(waypoint.data);
		
}
type [ Thread ] UARTDriver {
	[ Input ] position_status_in : EventDataPort < Coordinate_dot_Impl > ;
	[ Output ] waypoint_out : EventDataPort < MissionWindow_dot_Impl > ;
	[ Output ] position_status_out : EventDataPort < Coordinate_dot_Impl > ;
	[ Input ] waypoint_in : EventDataPort < MissionWindow_dot_Impl > ;


			[ Assumption ] a1 : Bool := good_mission_window(waypoint_in.data);
			[ Guarantee ] g1 : Bool := waypoint_out.data.crc = true;
		
}
type [ Process ] MC_SW {
	[ Input ] recv_map : EventDataPort < Command_dot_Impl > ;
	[ Output ] send_status : EventDataPort < Coordinate_dot_Impl > ;
	[ Output ] waypoint : EventDataPort < MissionWindow_dot_Impl > ;
	[ Input ] position_status : EventDataPort < Coordinate_dot_Impl > ;


			// we abstract away the authentication and just assume the message has undergone authenticity verification
			[ Assumption ] a1 : Bool := recv_map.data.HMAC = true;
			[ Guarantee ] g1 : Bool := waypoint.data.crc = true;
		
}
type [ Implementation ] MC_SW_dot_Impl extends ( MC_SW ) {
	[ Component ] RADIO : RadioDriver ;
	[ Component ] FPLN : FlightPlanner ;
	[ Component ] WPM : WaypointManager ;
	[ Component ] UART : UARTDriver ;
	c1 : Connector < EventDataPort < Command_dot_Impl > > ;
	assert :{ recv_map = c1 . source && RADIO . recv_map_in = c1 . target } ;
	c2 : Connector < EventDataPort < Coordinate_dot_Impl > > ;
	assert :{ RADIO . send_status_out = c2 . source && send_status = c2 . target } ;
	c3 : Connector < EventDataPort < Command_dot_Impl > > ;
	assert :{ RADIO . recv_map_out = c3 . source && FPLN . recv_map = c3 . target } ;
	c5 : Connector < DataPort < Mission_dot_Impl > > ;
	assert :{ FPLN . flight_plan = c5 . source && WPM . flight_plan = c5 . target } ;
	c6 : Connector < EventDataPort < MissionWindow_dot_Impl > > ;
	assert :{ WPM . waypoint = c6 . source && UART . waypoint_in = c6 . target } ;
	c7 : Connector < EventDataPort < Coordinate_dot_Impl > > ;
	assert :{ UART . position_status_out = c7 . source && WPM . position_status = c7 . target } ;
	c8 : Connector < EventDataPort < Coordinate_dot_Impl > > ;
	assert :{ UART . position_status_out = c8 . source && FPLN . position_status = c8 . target } ;
	c9 : Connector < EventDataPort < Coordinate_dot_Impl > > ;
	assert :{ UART . position_status_out = c9 . source && RADIO . send_status_in = c9 . target } ;
	c10 : Connector < EventDataPort < MissionWindow_dot_Impl > > ;
	assert :{ UART . waypoint_out = c10 . source && waypoint = c10 . target } ;
	c11 : Connector < EventDataPort < Coordinate_dot_Impl > > ;
	assert :{ position_status = c11 . source && UART . position_status_in = c11 . target } ;
}

			
		// These functions check the well-formedness of message structures
	
		good_coordinate : Coordinate_dot_Impl -> Bool := fun(coord : Coordinate_dot_Impl) {
																coord.lat >= -90 && 
																coord.lat <= 90 && 
																coord.long >= -180 && 
																coord.long <= 180 && 
																coord.alt >= 0 && 
																coord.alt <= 15000 } ;
		
		
		good_map : Map_dot_Impl -> Bool := fun(map : Map_dot_Impl) {	
			 												good_coordinate(map.wp1) && 
															good_coordinate(map.wp2) && 
															good_coordinate(map.wp3) && 
															good_coordinate(map.wp4) } ;
															
		good_pattern : FlightPattern -> Bool :=	fun(pattern : FlightPattern) {pattern = FlightPattern.ZigZag ||
																			  (pattern = FlightPattern.StraightLine) ||
																			   (pattern = FlightPattern.Perimeter)} ;
																		
		good_HMAC : Bool -> Bool := fun(hmac : Bool) { (hmac = true) || (hmac = false) } ;
			
			
		good_gs_command : Command_dot_Impl -> Bool :=	fun(cmd : Command_dot_Impl) {good_map(cmd.Map) && 
																		good_pattern(cmd.Pattern) && 
																		good_HMAC(cmd.HMAC) };
																		
		good_mission : Mission_dot_Impl -> Bool :=	fun( mission : Mission_dot_Impl) {good_coordinate(mission.wp1) && 
																		good_coordinate(mission.wp2) && 
																		good_coordinate(mission.wp3) && 
																		good_coordinate(mission.wp4) && 
																		good_coordinate(mission.wp5) && 
																		good_coordinate(mission.wp6) && 
																		good_coordinate(mission.wp7) && 
																		good_coordinate(mission.wp8) && 
																		good_coordinate(mission.wp9) && 
																		good_coordinate(mission.wp10) };
																		
		good_mission_window : MissionWindow_dot_Impl -> Bool :=	fun(win : MissionWindow_dot_Impl) {good_coordinate(win.wp1) && 
																				good_coordinate(win.wp2) && 
																				good_coordinate(win.wp3) && 
																				good_coordinate(win.wp4)};
																										
	

