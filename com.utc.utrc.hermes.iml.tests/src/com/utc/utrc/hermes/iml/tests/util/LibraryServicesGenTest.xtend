/*
 * Copyright (c) 2019 United Technologies Corporation. All rights reserved.
 * See License.txt in the project root directory for license information. */
/*
 * generated by Xtext 2.12.0
 */
package com.utc.utrc.hermes.iml.tests.util

import com.google.inject.Inject
import com.utc.utrc.hermes.iml.ImlParseHelper
import com.utc.utrc.hermes.iml.iml.NamedType
import com.utc.utrc.hermes.iml.tests.ImlInjectorProvider
import com.utc.utrc.hermes.iml.tests.TestHelper
import com.utc.utrc.hermes.iml.util.TermExpander
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import com.utc.utrc.hermes.iml.lib.ImlStdLib
import com.utc.utrc.hermes.iml.lib.LibraryServicesGenerator

@RunWith(XtextRunner)
@InjectWith(ImlInjectorProvider)
class LibraryServicesGenTest {
	@Inject extension ImlParseHelper
	
	@Inject extension ValidationTestHelper
	
	@Inject extension TestHelper
	
	@Inject TermExpander termExpander
	
	@Inject ImlStdLib stdLib;
	
	@Inject LibraryServicesGenerator libraryServiceGenerator;
	
	@Test
	def void testTraitDeclaration() {
		'''
		package iml.test;
		trait Type1;
		'''.parse.assertNoErrors
		
		val libName = "iml.test"
		val serviceClass = libraryServiceGenerator.generateSevices(libName, stdLib.getModelSymbols(libName)).toString
		assertTrue(serviceClass.contains("public static final String TYPE1 = \"Type1\""))
		assertTrue(serviceClass.contains("def getType1Trait()"))
		assertTrue(serviceClass.contains("def isType1("));
		assertTrue(serviceClass.contains("def getType1Symbols("));
	}
	
}
