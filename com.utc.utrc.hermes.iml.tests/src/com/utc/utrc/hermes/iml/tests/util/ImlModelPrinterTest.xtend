/*
 * Copyright (c) 2019 United Technologies Corporation. All rights reserved.
 * See License.txt in the project root directory for license information. */
/*
 * generated by Xtext 2.12.0
 */
package com.utc.utrc.hermes.iml.tests.util

import com.google.inject.Inject
import com.utc.utrc.hermes.iml.iml.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import static org.junit.Assert.*
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import com.utc.utrc.hermes.iml.tests.ImlInjectorProvider
import com.utc.utrc.hermes.iml.tests.TestHelper
import com.utc.utrc.hermes.iml.iml.SymbolDeclaration
import com.utc.utrc.hermes.iml.util.ImlUtil
import com.utc.utrc.hermes.iml.iml.Assertion
import com.utc.utrc.hermes.iml.iml.NamedType
import com.utc.utrc.hermes.iml.util.Phi
import com.utc.utrc.hermes.iml.iml.SequenceTerm
import com.utc.utrc.hermes.iml.custom.ImlCustomFactory
import org.eclipse.xtext.resource.XtextResource
import com.utc.utrc.hermes.iml.util.TermExtractor
import com.utc.utrc.hermes.iml.ImlParseHelper
import com.utc.utrc.hermes.iml.util.ImlModelPrinter
import org.eclipse.emf.ecore.util.EcoreUtil

@RunWith(XtextRunner)
@InjectWith(ImlInjectorProvider)
class ImlModePrinterTest {
	@Inject extension ImlParseHelper
	
	@Inject extension ValidationTestHelper
	
	@Inject extension TestHelper
	
	@Inject ImlModelPrinter modelPrinter
	
	@Test
	def void testSimpleModelPrinter() {
		'''
		package p;
		type T1 {
			v1 : Int;
		}
		'''.testModelPrinter
	}
	
	@Test
	def void testComplexModelPrinter() {
		'''
		package p;
		type [T2, T3 {5;}] T1<T1, T2> includes (T2, T3){
			v1 : Int := if (5 >= 3 || !true) {4 + 6 * 5 -3} else { v2 } ;
			v2<T> : Int;
			v3 : (Int -> Real, Bool[5], Int);
			
		}
		
		type T2 {
			
		}
		
		type T3 {
			
		}
		'''.testModelPrinter
	}
	
	def void testModelPrinter(CharSequence modelString) {
		val originaModel = modelString.parse
		originaModel.assertNoErrors
		val printerModelString = modelPrinter.doSwitch(originaModel)
		print(printerModelString)
		val printerModel = printerModelString.parse
		printerModel.assertNoErrors
		assertTrue(EcoreUtil.equals(originaModel, printerModel))
	}
	
}
