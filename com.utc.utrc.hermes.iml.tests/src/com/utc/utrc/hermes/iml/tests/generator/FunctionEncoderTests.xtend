/*
 * generated by Xtext 2.12.0
 */
package com.utc.utrc.hermes.iml.tests.generator

import com.google.inject.Inject
import com.utc.utrc.hermes.iml.iml.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import com.utc.utrc.hermes.iml.tests.ImlInjectorProvider
import com.utc.utrc.hermes.iml.generator.strategies.FunctionEncoder

@RunWith(typeof(XtextRunner))
@InjectWith(typeof(ImlInjectorProvider))

class FunctionEncoderTests {
	
	@Inject extension ParseHelper<Model> 
	@Inject extension ValidationTestHelper
	@Inject FunctionEncoder enc ;
	
	@Test
	def void Test0() {
		val model = '''
			package p;
			type A ;
			type B ;
			type C ;
		'''.parse
		Assert.assertNotNull(model)
		var expr = enc.encode(model);
		System.out.println(expr);
		
	}
	
	@Test
	def void TestDeclareFunForSymbolSimpleType() {
		val model = '''
			package p1;
			type T1;
			varx : T1;				
		'''.parse	
		Assert.assertNotNull(model)		
		var expr = enc.encode(model);
		System.out.println(expr)
	}

	@Test
	def void TestDeclareFunAndInitForSimpleType() {
		val model = '''
			package p1;
			type Int;
			var1 : Int := 10;				
		'''.parse	
		Assert.assertNotNull(model)		
		var expr = enc.encode(model);
		System.out.println(expr)
	}
	
	@Test
	def void TestDeclareFunForSymbolHigherOrderType_v1() {
		val model = '''
			package p1;
			type Int;
			type Int ~> Int; // allowed???
		'''.parse	
		Assert.assertNotNull(model)		
		var expr = enc.encode(model);
		System.out.println(expr)
	}

	@Test
	def void TestDeclareFunForSymbolHigherOrderType_v2() {
		val model = '''
			package p1;
			type T1;
			type T2;
			type T3;
			var1 : (p11 : T1, p12 : T2) ~> T3;
		'''.parse	
		Assert.assertNotNull(model)		
		var expr = enc.encode(model);
		System.out.println(expr)
	}
	
	@Test
	def void TestDeclareFunForSymbolHigherOrderType_v3() {
		val model = '''
			package p1;
			type T1;
			type T2;
			var1 : (p11 : T1, p12 : T2) ~> (p21 : T2, p22 : T1) ;
		'''.parse	
		Assert.assertNotNull(model)		
		var expr = enc.encode(model);
		System.out.println(expr)
	}
	
	
}
