/*
 * Copyright (c) 2019 United Technologies Corporation. All rights reserved.
 * See License.txt in the project root directory for license information. */
/*
 * generated by Xtext 2.12.0
 */
package com.utc.utrc.hermes.iml.tests.util

import com.google.inject.Inject
import com.utc.utrc.hermes.iml.ImlParseHelper
import com.utc.utrc.hermes.iml.iml.NamedType
import com.utc.utrc.hermes.iml.tests.ImlInjectorProvider
import com.utc.utrc.hermes.iml.tests.TestHelper
import com.utc.utrc.hermes.iml.util.TermExpander
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import com.utc.utrc.hermes.iml.iml.TermMemberSelection

@RunWith(XtextRunner)
@InjectWith(ImlInjectorProvider)
class TermExpanderTest {
	@Inject extension ImlParseHelper
	
	@Inject extension ValidationTestHelper
	
	@Inject extension TestHelper
	
	@Inject TermExpander termExpander
	
	@Test
	def void expandBooleanZeroLevelTerm() {
		val model = '''
		package p;
		type T1 {
			a : Bool;
			b : Bool := a;
		}
		'''.parse
		
		model.assertNoErrors
		
		val a = (model.findSymbol("T1") as NamedType).findSymbol("a")
		val b = (model.findSymbol("T1") as NamedType).findSymbol("b")
		
		val expand = termExpander.expand(b.definition)
		assertTrue(EcoreUtil.equals(b.definition.left, expand))
	}
	
	@Test
	def void expandBooleanOneLevelTerm() {
		val model = '''
		package p;
		type T1 {
			a : Bool := false;
			b : Bool := a;
		}
		'''.parse
		
		model.assertNoErrors
		
		val a = (model.findSymbol("T1") as NamedType).findSymbol("a")
		val b = (model.findSymbol("T1") as NamedType).findSymbol("b")
		
		val expand = termExpander.expand(b.definition)
		assertTrue(EcoreUtil.equals(a.definition.left, expand))
	}
	
	@Test
	def void expandBooleanTwoLevelsTerm() {
		val model = '''
		package p;
		type T1 {
			a : Bool := false;
			b : Bool := a;
			c : Bool := b;
		}
		'''.parse
		
		model.assertNoErrors
		
		val a = (model.findSymbol("T1") as NamedType).findSymbol("a")
		val c = (model.findSymbol("T1") as NamedType).findSymbol("c")
		
		val expand = termExpander.expand(c.definition)
		assertTrue(EcoreUtil.equals(a.definition.left, expand))
	}
	
	@Test
	def void expandBooleanOneLevelTermOtherType() {
		val model = '''
		package p;
		type T1 {
			a : T2;
			b : Int := a.x;
		}
		type T2 {
			x : Int := 5;
		}
		'''.parse
		
		model.assertNoErrors
		
		val b = (model.findSymbol("T1") as NamedType).findSymbol("b")
		val x = (model.findSymbol("T2") as NamedType).findSymbol("x")
		
		val expand = termExpander.expand(b.definition)
		assertTrue(EcoreUtil.equals(x.definition.left, expand))
	}
	
	@Test
	def void expandBooleanTwoLevelsTermOtherType_WithVariable() {
		val model = '''
		package p;
		type T1 {
			a : T2;
			b : Int := a.x;
		}
		type T2 {
			x : Int := y;
			y : Int;
		}
		'''.parse
		
		model.assertNoErrors
		
		val b = (model.findSymbol("T1") as NamedType).findSymbol("b")
		val x = (model.findSymbol("T2") as NamedType).findSymbol("x")
		
		val expand = termExpander.expand(b.definition)
		assertTrue(expand instanceof TermMemberSelection)
	}
	
}
