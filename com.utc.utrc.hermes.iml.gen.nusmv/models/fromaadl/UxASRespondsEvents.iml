package UxASRespondsEvents_pkg ;
import UxASNodeLibEvents.*;
import GenericServiceEvents_pkg.*;
import GenericLastServiceEvents_pkg.* ;
import iml.software.* ;
import iml.ports.* ;
import iml.connectivity.* ;
import iml.contracts.*;

type [Process] UxAS_responds {
    	
	[Input] AutomationRequest_in: EventDataPort<Bool>;
	[Output] AutomationResponse_out: EventDataPort<Bool>;
	
	amonitor : one_request_at_a_time ;
	adelaymonitor : one_request_at_a_time ;
	gmonitor : responds_once ;
	
	c1 : Connector < Bool > := 
	<Bool>connect(AutomationRequest_in.event,amonitor.b);
	c2 : Connector < Bool > := 
	<Bool>connect(AutomationResponse_out.event,amonitor.a);
	
	c11 : Connector < Bool > := 
	<Bool>connect(AutomationRequest_in.flowpoint.event,adelaymonitor.b);
	c21 : Connector < Bool > := 
	<Bool>connect(AutomationResponse_out.flowpoint.event,adelaymonitor.a);
	
	c3 : Connector < Bool > := 
	<Bool>connect(AutomationRequest_in.event,gmonitor.b);
	c4 : Connector < Bool > := 
	<Bool>connect(AutomationResponse_out.event,gmonitor.a);
	
	processing_path : FlowPath ;
	assert {processing_path.start = AutomationRequest_in.flowpoint && processing_path.end = AutomationResponse_out.flowpoint} ;
	
	d : delay;
	c5 : Connector < FlowPath > := 
	<FlowPath>connect(processing_path,d.f);
	c6 : Connector < Int > := 
	<Int>connect(8,d.n);
	
	
	[Assumption,Output] a : Bool := {amonitor.holds && adelaymonitor.holds};
	[Guarantee,Output] g : Bool := {gmonitor.holds && d.holds};
    					
} 

type [Process] UxAS_responds_dot_i extends ([Implementation] UxAS_responds){

	[Component] AutomationRequestValidator: GenericService;
	[Component] PlanBuilder: GenericService;
	[Component] TaskServiceBase: GenericService;
	[Component] RouteAggregator: GenericService;
	[Component] Planner: GenericLastService;
	
	conn001: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(AutomationRequest_in,AutomationRequestValidator.CmdRequest_in);
	
	conn002: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(AutomationRequestValidator.CmdResponse_out,AutomationResponse_out);
	
	conn011: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(AutomationRequestValidator.SubRequest_out,PlanBuilder.CmdRequest_in);
    
    conn012: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(PlanBuilder.CmdResponse_out, AutomationRequestValidator.SubResponse_in);
    
    conn021: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(PlanBuilder.SubRequest_out, TaskServiceBase.CmdRequest_in);
    conn022: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(TaskServiceBase.CmdResponse_out, PlanBuilder.SubResponse_in);
    
    conn031: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(TaskServiceBase.SubRequest_out, RouteAggregator.CmdRequest_in);
    conn032: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(RouteAggregator.CmdResponse_out, TaskServiceBase.SubResponse_in);
    
    conn041: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(RouteAggregator.SubRequest_out, Planner.CmdRequest_in);
    conn042: Connector<EventDataPort<Bool>> :=
	<EventDataPort<Bool>>connect(Planner.CmdResponse_out, RouteAggregator.SubResponse_in);

//    f : EndToEndFlow :=
//    source(AutomationRequestValidator.processing_path0).append(conn001.flow).
//    												    append(PlanBuilder.processing_path0).
//    												    append(conn021.flow).
//    												    append(TaskServiceBase.processing_path0).
//    												    append(conn031.flow).
//    													append(RouteAggregator.processing_path0).
//    													append(conn041.flow).
//    													append(Planner.processing_path).
//    													append(conn042.flow).
//    													append(RouteAggregator.processing_path1).
//    													append(conn032.flow).
//				    									append(TaskServiceBase.processing_path1).
//				    									append(conn022.flow).
//			    										append(PlanBuilder.processing_path1).
//			    										append(conn012.flow).
//    													append(AutomationRequestValidator.processing_path1) ;
    		
}